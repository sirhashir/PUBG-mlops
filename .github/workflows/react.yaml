name: Frontend Deployment

on:
  push:
    branches:
      - main
      - latest
    paths:
      - 'my-app/**'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

  build-and-push-ecr-image:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME_2 }}
        run: |
          cd my-app
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push Docker Image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME_2 }}
          IMAGE_TAG: latest
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Delete Previous build
        run: |
          if [ -n "$(docker ps -aq)" ]; then
            docker stop $(docker ps -aq)
            docker rm $(docker ps -aq)
            docker rmi $(docker images -q)
          fi

      - name: Pull latest images
        env:
          ECR_LOGIN_URI: ${{secrets.AWS_ECR_LOGIN_URI}}
          ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY_NAME_2}}
          IMAGE_TAG: latest
        run: |
          echo "${{ secrets.AWS_ECR_PASSWORD }}" | docker login -u ${{ secrets.AWS_ECR_USERNAME }} --password-stdin $ECR_LOGIN_URI -t 0
          docker pull $ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Docker Image to serve users
        env:
          ECR_LOGIN_URI: ${{secrets.AWS_ECR_LOGIN_URI_2}}
          ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY_NAME_2}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=react_app -e 'AWS_ACCESS_KEY_ID=$aws-access-key-id' -e 'AWS_SECRET_ACCESS_KEY=$aws-secret-access-key' -e 'AWS_REGION=$aws-region'  $ECR_LOGIN_URI/$ECR_REPOSITORY:latest
      - name: Clean previous images and containers
        run: |
          docker system prune -f
